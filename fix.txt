def DEFAULT_COMPILE_SDK_VERSION = 33def DEFAULT_BUILD_TOOLS_VERSION = '33.0.0'def DEFAULT_MIN_SDK_VERSION = 21def DEFAULT_TARGET_SDK_VERSION = 33def safeExtGet(prop, fallback) {    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback}apply plugin: 'com.android.library'apply plugin: 'maven-publish'buildscript {    if (project == rootProject) {        repositories {            google()            mavenCentral()        }        dependencies {            classpath 'com.android.tools.build:gradle:7.2.1' // Updated Android Gradle plugin version        }    }}android {    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)    buildToolsVersion safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)    defaultConfig {        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)        versionCode 1        versionName "1.0"    }    lintOptions {        abortOnError false    }}repositories {    mavenLocal()    maven {        url "$rootDir/../node_modules/react-native/android"    }    maven {        url "$rootDir/../node_modules/jsc-android/dist"    }    google()    mavenCentral()}dependencies {    implementation 'com.facebook.react:react-native:+'  // From node_modules}def configureReactNativePom(def pom) {    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)    pom.project {        name packageJson.title        artifactId packageJson.name        version = packageJson.version        group = "com.reactlibrary"        description packageJson.description        url packageJson.repository.baseUrl        licenses {            license {                name packageJson.license                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename                distribution 'repo'            }        }        developers {            developer {                id packageJson.author.username                name packageJson.author.name            }        }    }}afterEvaluate { project ->    task androidJavadoc(type: Javadoc) {        source = android.sourceSets.main.java.srcDirs        classpath += files(android.bootClasspath)        classpath += files(android.sourceSets.main.java.srcDirs)        include '**/*.java'    }    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {        archiveClassifier.set('javadoc')        from androidJavadoc.destinationDir    }    task androidSourcesJar(type: Jar) {        archiveClassifier.set('sources')        from android.sourceSets.main.java.srcDirs        include '**/*.java'    }    android.libraryVariants.all { variant ->        def name = variant.name.capitalize()        def javaCompileTask = variant.javaCompileProvider.get()        task "jar${name}"(type: Jar, dependsOn: javaCompileTask) {            from javaCompileTask.destinationDir        }    }    artifacts {        archives androidSourcesJar        archives androidJavadocJar    }    publishing {        publications {            library(MavenPublication) {                // Reference the AAR file generated by the Android build                afterEvaluate {                    artifact("$buildDir/outputs/aar/${project.name}-release.aar")                }                artifact(androidSourcesJar) {                    classifier "sources"                }                artifact(androidJavadocJar) {                    classifier "javadoc"                }                pom.withXml {                    def dependenciesNode = asNode().appendNode('dependencies')                    configurations.implementation.allDependencies.each { dependency ->                        def dependencyNode = dependenciesNode.appendNode('dependency')                        dependencyNode.appendNode('groupId', dependency.group)                        dependencyNode.appendNode('artifactId', dependency.name)                        dependencyNode.appendNode('version', dependency.version)                        dependencyNode.appendNode('scope', 'compile')                    }                }            }        }        repositories {            maven {                url "file://${projectDir}/../android/maven"            }        }    }}